/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dialogs;

import manager.SessionManager;
import passinterface.AbstractSessionChecker;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.io.File;
import java.io.FileNotFoundException;

/**
 * @author lucy
 */
public class OpenSessionDialog extends javax.swing.JDialog {

    private String[] sessionList;
    private AbstractSessionChecker sessionChecker;
    private String pass = "", session = "";
    private boolean isCanceled = false;
    private boolean isImported = false; // set to true if a session file was
    // imported


    /**
     * Creates new form SessionAndPassFrame
     */
    public OpenSessionDialog( JFrame parent, AbstractSessionChecker sessionChecker ) throws
            ClassNotFoundException, IllegalAccessException, InstantiationException,
            UnsupportedLookAndFeelException, FileNotFoundException {

        super( parent, "session and credentials", true );

        //centers the dialog
        this.setLocationRelativeTo( getParent() );

        //gets the list of available sessions
        this.sessionChecker = sessionChecker;
        sessionList = sessionChecker.availableSessions();

        if( sessionList == null ) {
            sessionList = new String[ 0 ];
        }

        // sets close operation
        this.setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
        UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName() );
        initComponents();

        // press ENTER to activate the ok button
        this.getRootPane().setDefaultButton( okButton );


        // removes the new button from the togglePolicy (ignored when using tabs
        // to navigate through inputs)
        browseButton.setFocusable( false );
        newSessionButton.setFocusable( false );

        importRB.setFocusable( false );
        selectSessionRB.setFocusable( false );

        importTF.setFocusable( false );
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroupImportOrSelect = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        sessionL = new javax.swing.JLabel();
        if( this.sessionList == null ) {
            this.sessionCombo = new javax.swing.JComboBox<String>( new String[]{ "choose..." } );
        } else {
            sessionCombo = new javax.swing.JComboBox<String>( sessionList );
            this.sessionCombo.insertItemAt( "choose...", 0 );
            this.sessionCombo.setSelectedIndex( 0 );
        }
        passL = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        passTF = new javax.swing.JPasswordField();
        newSessionButton = new javax.swing.JButton();
        importTF = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        importRB = new javax.swing.JRadioButton();
        selectSessionRB = new javax.swing.JRadioButton();

        setTitle( "EasyPass - open session" );
        setResizable( false );

        sessionL.setFont( new java.awt.Font( "Tahoma", 0, 12 ) );
        sessionL.setLabelFor( sessionCombo );
        sessionL.setText( "Choose your session :" );
        sessionL.setFocusable( false );

        sessionCombo.setFont( new java.awt.Font( "Tahoma", 0, 12 ) );
        sessionCombo.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                sessionComboActionPerformed( evt );
            }
        } );

        passL.setFont( new java.awt.Font( "Tahoma", 0, 12 ) );
        passL.setText( "Password:" );

        okButton.setFont( new java.awt.Font( "Tahoma", 0, 12 ) );
        okButton.setText( "Launch" );
        okButton.setEnabled( false );
        okButton.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                okButtonActionPerformed( evt );
            }
        } );

        cancelButton.setFont( new java.awt.Font( "Tahoma", 0, 12 ) );
        cancelButton.setText( "Cancel" );
        cancelButton.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                cancelButtonActionPerformed( evt );
            }
        } );

        passTF.setEnabled( false );
        passTF.addKeyListener( new java.awt.event.KeyAdapter() {
            public void keyTyped( java.awt.event.KeyEvent evt ) {
                passTFKeyTyped( evt );
            }
        } );

        newSessionButton.setFont( new java.awt.Font( "Tahoma", 0, 12 ) );
        newSessionButton.setText( "New..." );
        newSessionButton.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                newSessionButtonActionPerformed( evt );
            }
        } );

        importTF.setEditable( false );

        browseButton.setFont( new java.awt.Font( "Tahoma", 0, 12 ) );
        browseButton.setText( "Browse" );
        browseButton.setEnabled( false );
        browseButton.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( java.awt.event.ActionEvent evt ) {
                browseButtonActionPerformed( evt );
            }
        } );

        buttonGroupImportOrSelect.add( importRB );
        importRB.setFont( new java.awt.Font( "Tahoma", 0, 12 ) );
        importRB.setText( "Import" );
        importRB.addChangeListener( new javax.swing.event.ChangeListener() {
            public void stateChanged( javax.swing.event.ChangeEvent evt ) {
                importRBStateChanged( evt );
            }
        } );

        buttonGroupImportOrSelect.add( selectSessionRB );
        selectSessionRB.setFont( new java.awt.Font( "Tahoma", 0, 12 ) );
        selectSessionRB.setSelected( true );
        selectSessionRB.setText( "Open" );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout( mainPanel );
        mainPanel.setLayout( mainPanelLayout );
        mainPanelLayout.setHorizontalGroup( mainPanelLayout.createParallelGroup( javax.swing
                .GroupLayout.Alignment.LEADING ).addGroup( javax.swing.GroupLayout.Alignment
                .TRAILING, mainPanelLayout.createSequentialGroup().addContainerGap().addGroup(
                mainPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.TRAILING )
                        .addComponent( sessionL, javax.swing.GroupLayout.Alignment.LEADING )
                        .addGroup( javax.swing.GroupLayout.Alignment.LEADING,
                                mainPanelLayout.createSequentialGroup().addGroup( mainPanelLayout
                                        .createParallelGroup( javax.swing.GroupLayout.Alignment
                                                .LEADING ).addComponent( passL ).addComponent(
                                                importRB ).addComponent( selectSessionRB ) )
                                        .addPreferredGap( javax.swing.LayoutStyle
                                                .ComponentPlacement.UNRELATED ).addGroup(
                                        mainPanelLayout.createParallelGroup( javax.swing
                                                .GroupLayout.Alignment.LEADING ).addGroup(
                                                mainPanelLayout.createSequentialGroup().addGroup(
                                                        mainPanelLayout.createParallelGroup(
                                                                javax.swing.GroupLayout.Alignment
                                                                        .TRAILING,
                                                                false ).addComponent( importTF,
                                                                javax.swing.GroupLayout.Alignment
                                                                        .LEADING ).addComponent(
                                                                sessionCombo,
                                                                javax.swing.GroupLayout.Alignment
                                                                        .LEADING, 0, 160,
                                                                Short.MAX_VALUE ) )
                                                        .addPreferredGap( javax.swing.LayoutStyle
                                                                .ComponentPlacement.UNRELATED )
                                                        .addGroup( mainPanelLayout
                                                                .createParallelGroup( javax.swing
                                                                        .GroupLayout.Alignment
                                                                        .TRAILING ).addComponent(
                                                                        browseButton,
                                                                        javax.swing.GroupLayout
                                                                                .DEFAULT_SIZE,
                                                                        77,
                                                                        Short.MAX_VALUE )
                                                                .addComponent( newSessionButton,
                                                                        javax.swing.GroupLayout
                                                                                .Alignment
                                                                                .LEADING,
                                                                        javax.swing.GroupLayout
                                                                                .DEFAULT_SIZE,
                                                                        77,
                                                                        Short.MAX_VALUE ) ) )
                                                .addGroup( mainPanelLayout.createParallelGroup(
                                                        javax.swing.GroupLayout.Alignment
                                                                .TRAILING ).addGroup(
                                                        mainPanelLayout.createSequentialGroup()
                                                                .addComponent( okButton ).addGap(
                                                                18, 18,
                                                                18 ).addComponent( cancelButton )
                                                ).addComponent( passTF,
                                                        javax.swing.GroupLayout.Alignment
                                                                .LEADING,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        249,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE )
                                                ) ).addPreferredGap( javax.swing.LayoutStyle
                                        .ComponentPlacement.RELATED ) ) ).addGap( 20, 20, 20 ) ) );
        mainPanelLayout.setVerticalGroup( mainPanelLayout.createParallelGroup( javax.swing
                .GroupLayout.Alignment.LEADING ).addGroup( mainPanelLayout.createSequentialGroup
                ().addContainerGap().addComponent( sessionL ).addPreferredGap( javax.swing
                .LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE,
                Short.MAX_VALUE ).addGroup( mainPanelLayout.createParallelGroup( javax.swing
                .GroupLayout.Alignment.BASELINE ).addComponent( importRB ).addComponent(
                importTF, javax.swing.GroupLayout.PREFERRED_SIZE,
                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE )
                .addComponent( browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23,
                        javax.swing.GroupLayout.PREFERRED_SIZE ) ).addPreferredGap( javax.swing
                .LayoutStyle.ComponentPlacement.UNRELATED ).addGroup( mainPanelLayout
                .createParallelGroup( javax.swing.GroupLayout.Alignment.BASELINE ).addComponent(
                        selectSessionRB ).addComponent( sessionCombo,
                        javax.swing.GroupLayout.PREFERRED_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE ).addComponent( newSessionButton,
                        javax.swing.GroupLayout.PREFERRED_SIZE, 23,
                        javax.swing.GroupLayout.PREFERRED_SIZE ) ).addGap( 18, 18,
                18 ).addGroup( mainPanelLayout.createParallelGroup( javax.swing.GroupLayout
                .Alignment.BASELINE ).addComponent( passTF,
                javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                javax.swing.GroupLayout.PREFERRED_SIZE ).addComponent( passL ) ).addGap( 18, 18,
                18 ).addGroup( mainPanelLayout.createParallelGroup( javax.swing.GroupLayout
                .Alignment.BASELINE ).addComponent( cancelButton,
                javax.swing.GroupLayout.PREFERRED_SIZE, 34,
                javax.swing.GroupLayout.PREFERRED_SIZE ).addComponent( okButton,
                javax.swing.GroupLayout.PREFERRED_SIZE, 34,
                javax.swing.GroupLayout.PREFERRED_SIZE ) ).addContainerGap() ) );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout( getContentPane() );
        getContentPane().setLayout( layout );
        layout.setHorizontalGroup( layout.createParallelGroup( javax.swing.GroupLayout.Alignment
                .LEADING ).addComponent( mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE,
                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE ) );
        layout.setVerticalGroup( layout.createParallelGroup( javax.swing.GroupLayout.Alignment
                .LEADING ).addGroup( layout.createSequentialGroup().addComponent( mainPanel,
                javax.swing.GroupLayout.PREFERRED_SIZE, 197,
                javax.swing.GroupLayout.PREFERRED_SIZE ).addContainerGap( javax.swing.GroupLayout
                .DEFAULT_SIZE, Short.MAX_VALUE ) ) );

        pack();
    }// </editor-fold>                        


    private void sessionComboActionPerformed( java.awt.event.ActionEvent evt ) {
        setOkButtonState();
        setPassTFState();
    }


    private void okButtonActionPerformed( java.awt.event.ActionEvent evt ) {
        pass = new String( passTF.getPassword() );

        if( this.isImported ) {
            session = this.importTF.getText();
        } else {
            session = ( String ) sessionCombo.getSelectedItem();
        }

        //ok only if : the credentials are valid. BUT, if the session is new or isImported,
        // impossible to check (the dialog needs to delegate the tasks). So,
        // returns only if session isImported OR the
        // session does
        // not exist
        // OR the  credentials are valid.
        if( isImported || !sessionChecker.sessionExists( session ) || sessionChecker
                .areCredentialsValid( session, pass ) ) {
            this.reset();
            this.setVisible( false );
        } else {
            passTF.setText( "" );
            setOkButtonState();
        }
    }


    private void cancelButtonActionPerformed( java.awt.event.ActionEvent evt ) {
        this.isCanceled = true;
        this.setVisible( false );
    }


    private void newSessionButtonActionPerformed( java.awt.event.ActionEvent evt ) {
        String s = JOptionPane.showInputDialog( this, "New session name : ", "" );
        // the (?i) makes everything on the right case-insensitive
        if( s != null && s.matches( "^(?i)[a-z][a-z1-9\\._-]{4,}$" ) ) {
            sessionCombo.addItem( s );
            sessionCombo.setSelectedIndex( sessionCombo.getItemCount() - 1 );
        } else {
            JOptionPane.showMessageDialog( this, "A session name must start with a letter \n and " +
                    "" + "contain only letters and digits. \nDelimiters accepted : _.-", "error",
                    JOptionPane.WARNING_MESSAGE );
        }
    }


    private void browseButtonActionPerformed( java.awt.event.ActionEvent evt ) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory( new File( this.isImported ? this.importTF.getText() : "." ) );
        chooser.setDialogTitle( "Import session file..." );
        chooser.setFileSelectionMode( JFileChooser.FILES_ONLY );
        chooser.setFileFilter( new ImportSessionFilter() );

        if( chooser.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {

            this.isImported = true;
            this.importTF.setText( chooser.getSelectedFile().getAbsolutePath() );
            sessionCombo.setEnabled( false );
            this.newSessionButton.setEnabled( false );
        }

        setOkButtonState();
        setPassTFState();
    }


    private void importRBStateChanged( javax.swing.event.ChangeEvent evt ) {
        if( this.importRB.isSelected() ) {
            this.isImported = true;
            sessionCombo.setEnabled( false );
            this.newSessionButton.setEnabled( false );
            this.browseButton.setEnabled( true );

        } else if( this.selectSessionRB.isSelected() ) {
            this.isImported = false;
            sessionCombo.setEnabled( true );
            this.newSessionButton.setEnabled( true );
            this.browseButton.setEnabled( false );
        }

        setOkButtonState();
        setPassTFState();
    }


    private void passTFKeyTyped( java.awt.event.KeyEvent evt ) {
        setOkButtonState();
    }


    /**
     * resets the textareas to empty values
     */
    public void reset() {
        passTF.setText( "" );
        this.importTF.setText( "" );
        sessionCombo.setSelectedIndex( 0 );
    }


    private void setPassTFState() {
        if( ( this.isImported && !this.importTF.getText().isEmpty() ) || ( !this.isImported &&
                this.sessionCombo.getSelectedIndex() != 0 ) ) {
            passTF.setEnabled( true );
        } else {
            passTF.setEnabled( false );
        }
    }


    private void setOkButtonState() {
        if( passTF.getPassword().length > 3 && ( ( this.isImported && !this.importTF.getText().isEmpty() ) || ( !this.isImported && sessionCombo.getSelectedIndex() != 0 ) ) ) {
            this.okButton.setEnabled( true );
        } else {
            this.okButton.setEnabled( false );
        }
    }


    /* *****************************************************************
     * getters and setter
     * ****************************************************************/
    public String getSession() {
        return session;
    }


    public String getPass() {
        return pass;
    }


    public boolean isImported() {
        return isImported;
    }


    public boolean isCanceled() {
        return this.isCanceled;
    }//end isCanceled


    /**
     * @param args the command line arguments
     */
    public static void main( String args[] ) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() ) {
                if( "Nimbus".equals( info.getName() ) ) {
                    javax.swing.UIManager.setLookAndFeel( info.getClassName() );
                    break;
                }
            }
        } catch( ClassNotFoundException ex ) {
            java.util.logging.Logger.getLogger( OpenSessionDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch( InstantiationException ex ) {
            java.util.logging.Logger.getLogger( OpenSessionDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch( IllegalAccessException ex ) {
            java.util.logging.Logger.getLogger( OpenSessionDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch( javax.swing.UnsupportedLookAndFeelException ex ) {
            java.util.logging.Logger.getLogger( OpenSessionDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater( new Runnable() {
            public void run() {
                try {
                    new OpenSessionDialog( null, null ).setVisible( true );
                } catch( Exception e ) {
                    e.printStackTrace();
                    ;
                }
            }
        } );
    }


    // Variables declaration - do not modify
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup buttonGroupImportOrSelect;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton importRB;
    private javax.swing.JTextField importTF;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton newSessionButton;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel passL;
    private javax.swing.JPasswordField passTF;
    private javax.swing.JRadioButton selectSessionRB;
    private javax.swing.JComboBox sessionCombo;
    private javax.swing.JLabel sessionL;
    // End of variables declaration                   

    /**
     * class used to filter the files selectables in the filechooser window.
     *
     * @author lucy
     */
    class ImportSessionFilter extends FileFilter {

        public String getDescription() {
            return "easypass session file (*.data_ser)";
        }


        public boolean accept( File file ) {
            return file.isDirectory() || file.getName().endsWith( SessionManager.DATA_EXTENSION );
        }
    }// end private class
}
