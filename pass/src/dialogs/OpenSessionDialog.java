/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dialogs;

import manager.SessionManager;
import passinterface.AbstractSessionChecker;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.filechooser.FileFilter;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.logging.Logger;

/**
 * @author lucy
 */
public class OpenSessionDialog extends JDialog {

    private String[] sessionList;
    private AbstractSessionChecker sessionChecker;
    private String pass = "", session = "";
    private boolean imported = false; // set to true if a session file was
    // imported



    /**
     * Creates new form SessionAndPassFrame
     */
    public OpenSessionDialog( JFrame parent, AbstractSessionChecker sessionChecker ) throws
            ClassNotFoundException, IllegalAccessException, InstantiationException,
            UnsupportedLookAndFeelException, FileNotFoundException {
        super( parent, "session and credentials", true );

        this.sessionChecker = sessionChecker;
        sessionList = sessionChecker.availableSessions();

        if( sessionList == null ) {
            sessionList = new String[ 0 ];
        }

        // sets close operation
        this.setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );

        UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName() );
        initComponents();

        // press ENTER to activate the ok button
        this.getRootPane().getInputMap( JComponent.WHEN_IN_FOCUSED_WINDOW ).put( KeyStroke
                .getKeyStroke( KeyEvent.VK_ENTER, 0 ), "OK" );

        this.getRootPane().getActionMap().put( "OK", new AbstractAction() {
            public void actionPerformed( ActionEvent e ) {
                okButton.doClick();
            }
        } );

        // removes the new button from the togglePolicy (ignored when using tabs
        // to navigate through inputs)
        browseButton.setFocusable( false );
        newSessionButton.setFocusable( false );

        importRB.setFocusable( false );
        selectSessionRB.setFocusable( false );

        importTF.setFocusable( false );
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        buttonGroupImportOrSelect = new ButtonGroup();
        sessionL = new JLabel();
        if( sessionList == null ) {
            sessionCombo = new JComboBox<String>( new String[]{ "choose..." } );
        } else {
            sessionCombo = new JComboBox<String>( sessionList );
            sessionCombo.insertItemAt( "choose...", 0 );
            sessionCombo.setSelectedIndex( 0 );
        }
        passL = new JLabel();
        okButton = new JButton();
        cancelButton = new JButton();
        passTF = new JPasswordField();
        newSessionButton = new JButton();
        importTF = new JTextField();
        browseButton = new JButton();
        importRB = new JRadioButton();
        selectSessionRB = new JRadioButton();

        setTitle( "EasyPass - open session" );
        setResizable( false );

        sessionL.setFont( new java.awt.Font( "Tahoma", 0, 12 ) ); // NOI18N
        sessionL.setLabelFor( sessionCombo );
        sessionL.setText( "Choose your session :" );
        sessionL.setFocusable( false );

        sessionCombo.setFont( new java.awt.Font( "Tahoma", 0, 12 ) ); // NOI18N
        sessionCombo.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( ActionEvent evt ) {
                sessionComboActionPerformed( evt );
            }
        } );

        passL.setFont( new java.awt.Font( "Tahoma", 0, 12 ) ); // NOI18N
        passL.setText( "Password:" );

        okButton.setFont( new java.awt.Font( "Tahoma", 0, 12 ) ); // NOI18N
        okButton.setText( "Launch" );
        okButton.setEnabled( false );
        okButton.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( ActionEvent evt ) {
                okButtonActionPerformed( evt );
            }
        } );

        cancelButton.setFont( new java.awt.Font( "Tahoma", 0, 12 ) ); // NOI18N
        cancelButton.setText( "Cancel" );
        cancelButton.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( ActionEvent evt ) {
                cancelButtonActionPerformed( evt );
            }
        } );

        passTF.setEnabled( false );
        passTF.addKeyListener( new java.awt.event.KeyAdapter() {
            public void keyTyped( KeyEvent evt ) {
                passTFKeyTyped( evt );
            }
        } );

        newSessionButton.setFont( new java.awt.Font( "Tahoma", 0, 12 ) ); // NOI18N
        newSessionButton.setText( "New..." );
        newSessionButton.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( ActionEvent evt ) {
                newSessionButtonActionPerformed( evt );
            }
        } );

        importTF.setEditable( false );

        browseButton.setFont( new java.awt.Font( "Tahoma", 0, 12 ) ); // NOI18N
        browseButton.setText( "Browse" );
        browseButton.setEnabled( false );
        browseButton.addActionListener( new java.awt.event.ActionListener() {
            public void actionPerformed( ActionEvent evt ) {
                browseButtonActionPerformed( evt );
            }
        } );

        buttonGroupImportOrSelect.add( importRB );
        importRB.setFont( new java.awt.Font( "Tahoma", 0, 12 ) ); // NOI18N
        importRB.setText( "Import" );
        importRB.addChangeListener( new ChangeListener() {
            public void stateChanged( ChangeEvent evt ) {
                importRBStateChanged( evt );
            }
        } );

        buttonGroupImportOrSelect.add( selectSessionRB );
        selectSessionRB.setFont( new java.awt.Font( "Tahoma", 0, 12 ) ); // NOI18N
        selectSessionRB.setSelected( true );
        selectSessionRB.setText( "Open" );

        GroupLayout mainPanelLayout = new GroupLayout( mainPanel );
        mainPanel.setLayout( mainPanelLayout );
        mainPanelLayout.setHorizontalGroup( mainPanelLayout.createParallelGroup( GroupLayout
                .Alignment.LEADING ).addGroup( GroupLayout.Alignment.TRAILING, mainPanelLayout
                .createParallelGroup( GroupLayout.Alignment.TRAILING ).addGroup( mainPanelLayout
                        .createSequentialGroup().addGap( 0, 0, Short.MAX_VALUE ).addComponent(
                                okButton ).addPreferredGap( LayoutStyle.ComponentPlacement
                                .RELATED ).addComponent( cancelButton ).addGap( 20, 20,
                                20 ) ).addGroup( GroupLayout.Alignment.LEADING,
                        mainPanelLayout.createSequentialGroup().addGroup( mainPanelLayout
                                .createParallelGroup( GroupLayout.Alignment.TRAILING ).addGroup(
                                        GroupLayout.Alignment.LEADING,
                                        mainPanelLayout.createSequentialGroup().addComponent(
                                                passL ).addPreferredGap( LayoutStyle
                                                .ComponentPlacement.UNRELATED ).addComponent(
                                                passTF, GroupLayout.PREFERRED_SIZE, 249,
                                                GroupLayout.PREFERRED_SIZE ) ).addComponent(
                                        sessionL, GroupLayout.Alignment.LEADING ).addGroup(
                                        GroupLayout.Alignment.LEADING,
                                        mainPanelLayout.createSequentialGroup().addGroup(
                                                mainPanelLayout.createParallelGroup( GroupLayout
                                                        .Alignment.LEADING ).addComponent(
                                                        importRB ).addComponent( selectSessionRB
                                                ) ).addGroup( mainPanelLayout.createParallelGroup( GroupLayout.Alignment.TRAILING ).addGroup( GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup().addPreferredGap( LayoutStyle.ComponentPlacement.RELATED ).addComponent( sessionCombo, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE ).addPreferredGap( LayoutStyle.ComponentPlacement.RELATED ).addComponent( newSessionButton, GroupLayout.PREFERRED_SIZE, 73, GroupLayout.PREFERRED_SIZE ) ).addGroup( GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup().addGap( 2, 2, 2 ).addComponent( importTF, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE ).addPreferredGap( LayoutStyle.ComponentPlacement.RELATED ).addComponent( browseButton ) ) ) ) ).addGap( 0, 20, Short.MAX_VALUE ) ).addGroup( mainPanelLayout.createSequentialGroup().addContainerGap() ) ) );
        mainPanelLayout.setVerticalGroup( mainPanelLayout.createParallelGroup( GroupLayout
                .Alignment.LEADING ).addGroup( mainPanelLayout.createSequentialGroup()
                .addContainerGap().addComponent( sessionL ).addPreferredGap( LayoutStyle
                        .ComponentPlacement.RELATED, 9, Short.MAX_VALUE ).addGroup(
                        mainPanelLayout.createParallelGroup( GroupLayout.Alignment.BASELINE )
                                .addComponent( importRB ).addComponent( importTF,
                                GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                GroupLayout.PREFERRED_SIZE ).addComponent( browseButton,
                                GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE ) )
                .addPreferredGap( LayoutStyle.ComponentPlacement.UNRELATED ).addGroup(
                        mainPanelLayout.createParallelGroup( GroupLayout.Alignment.BASELINE )
                                .addComponent( selectSessionRB ).addComponent( sessionCombo,
                                GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                GroupLayout.PREFERRED_SIZE ).addComponent( newSessionButton,
                                GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE ) )
                .addGap( 18, 18, 18 ).addGroup( mainPanelLayout.createParallelGroup( GroupLayout
                        .Alignment.BASELINE ).addComponent( passTF, GroupLayout.PREFERRED_SIZE,
                        20, GroupLayout.PREFERRED_SIZE ).addComponent( passL ) ).addGap( 18, 18,
                        18 ).addGroup( mainPanelLayout.createParallelGroup( GroupLayout.Alignment
                        .BASELINE ).addComponent( okButton, GroupLayout.PREFERRED_SIZE, 34,
                        GroupLayout.PREFERRED_SIZE ).addComponent( cancelButton,
                        GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE ) )
                .addContainerGap() ) );

        GroupLayout layout = new GroupLayout( getContentPane() );
        getContentPane().setLayout( layout );
        layout.setHorizontalGroup( layout.createParallelGroup( GroupLayout.Alignment.LEADING )
                .addGroup( GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addGap(
                        0, 4, Short.MAX_VALUE ).addComponent( mainPanel,
                        GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                        GroupLayout.PREFERRED_SIZE ) ) );
        layout.setVerticalGroup( layout.createParallelGroup( GroupLayout.Alignment.LEADING )
                .addGroup( layout.createSequentialGroup().addComponent( mainPanel,
                        GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                        GroupLayout.PREFERRED_SIZE ).addGap( 0, 1, Short.MAX_VALUE ) ) );

        pack();
    }// </editor-fold>


    private void sessionComboActionPerformed( ActionEvent evt ) {
        setOkButtonState();
        setPassTFState();
    }


    private void okButtonActionPerformed( ActionEvent evt ) {

        pass = new String( passTF.getPassword() );

        if( this.imported ) {
            session = this.importTF.getText();
        } else {
            session = ( String ) sessionCombo.getSelectedItem();
        }

        //ok only if : the credentials are valid. BUT, if the session is new or imported,
        // impossible to check (the dialog needs to delegate the tasks). So,
        // returns only if session imported OR the
        // session does
        // not exist
        // OR the  credentials are valid.
        if( imported || !sessionChecker.sessionExists( session ) || sessionChecker
                .areCredentialsValid( session, pass ) ) {
            this.reset();
            this.setVisible( false );
        } else {
            passTF.setText( "" );
            setOkButtonState();
        }

    }


    private void cancelButtonActionPerformed( ActionEvent evt ) {
        this.setVisible( false );
    }


    private void newSessionButtonActionPerformed( ActionEvent evt ) {
        String s = JOptionPane.showInputDialog( this, "New session name : ", "" );
        // the (?i) makes everything on the right case-insensitive
        if( s != null && s.matches( "^(?i)[a-z][a-z1-9\\._-]{4,}$" ) ) {
            sessionCombo.addItem( s );
            sessionCombo.setSelectedIndex( sessionCombo.getItemCount() - 1 );
        } else {
            JOptionPane.showMessageDialog( this, "A session name must start with a letter \n and " +
                    "" + "contain only letters and digits. \nDelimiters accepted : _.-", "error",
                    JOptionPane.WARNING_MESSAGE );
        }
    }


    private void browseButtonActionPerformed( ActionEvent evt ) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory( new File( this.imported ? this.importTF.getText() : "." ) );
        chooser.setDialogTitle( "Import session file..." );
        chooser.setFileSelectionMode( JFileChooser.FILES_ONLY );
        chooser.setFileFilter( new ImportSessionFilter() );

        if( chooser.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {

            this.imported = true;
            this.importTF.setText( chooser.getSelectedFile().getAbsolutePath() );
            sessionCombo.setEnabled( false );
            this.newSessionButton.setEnabled( false );
        }

        setOkButtonState();
        setPassTFState();

    }


    private void importRBStateChanged( ChangeEvent evt ) {
        if( this.importRB.isSelected() ) {
            this.imported = true;
            sessionCombo.setEnabled( false );
            this.newSessionButton.setEnabled( false );
            this.browseButton.setEnabled( true );

        } else if( this.selectSessionRB.isSelected() ) {
            this.imported = false;
            sessionCombo.setEnabled( true );
            this.newSessionButton.setEnabled( true );
            this.browseButton.setEnabled( false );
        }

        setOkButtonState();
        setPassTFState();
    }


    private void passTFKeyTyped( KeyEvent evt ) {
        setOkButtonState();
    }


    /**
     * resets the textareas to empty values
     */
    public void reset() {
        passTF.setText( "" );
        this.importTF.setText( "" );
        sessionCombo.setSelectedIndex( 0 );
    }


    private void setPassTFState() {
        if( ( this.imported && !this.importTF.getText().isEmpty() ) || ( !this.imported && this
                .sessionCombo.getSelectedIndex() != 0 ) ) {
            passTF.setEnabled( true );
        } else {
            passTF.setEnabled( false );
        }
    }


    private void setOkButtonState() {
        if( passTF.getPassword().length > 3 && ( ( this.imported && !this.importTF.getText()
                .isEmpty() ) || ( !this.imported && sessionCombo.getSelectedIndex() != 0 ) ) ) {
            this.okButton.setEnabled( true );
        } else {
            this.okButton.setEnabled( false );
        }
    }


    /**
     * ******************************************** getters and setters
     * *******************************************
     */
    public String getSession() {
        return session;
    }


    public String getPass() {
        return pass;
    }


    public boolean isImported() {
        return imported;
    }


    /**
     * @param args the command line arguments
     */
    public static void main( String args[] ) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase
         * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for( UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels() ) {
                if( "Nimbus".equals( info.getName() ) ) {
                    UIManager.setLookAndFeel( info.getClassName() );
                    break;
                }
            }
        } catch( ClassNotFoundException ex ) {
            Logger.getLogger( OpenSessionDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch( InstantiationException ex ) {
            Logger.getLogger( OpenSessionDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch( IllegalAccessException ex ) {
            Logger.getLogger( OpenSessionDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch( UnsupportedLookAndFeelException ex ) {
            Logger.getLogger( OpenSessionDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        // </editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater( new Runnable() {
            public void run() {
                try {
                    new OpenSessionDialog( null, null ).setVisible( true );
                } catch( Exception e ) {
                    e.printStackTrace();
                }
            }
        } );
    }


    // Variables declaration - do not modify
    private JButton browseButton;
    private ButtonGroup buttonGroupImportOrSelect;
    private JButton cancelButton;
    private JRadioButton importRB;
    private JTextField importTF;
    private javax.swing.JPanel mainPanel = new JPanel();
    private JButton newSessionButton;
    private JButton okButton;
    private JLabel passL;
    private JPasswordField passTF;
    private JRadioButton selectSessionRB;
    private JComboBox sessionCombo;
    private JLabel sessionL;


    // End of variables declaration

    /**
     * class used to filter the files selectables in the filechooser window.
     *
     * @author lucy
     */
    class ImportSessionFilter extends FileFilter {

        public String getDescription() {
            return "easypass session file (*.data_ser)";
        }


        public boolean accept( File file ) {
            return file.isDirectory() || file.getName().endsWith( SessionManager.DATA_EXTENSION );
        }
    }// end private class
}
